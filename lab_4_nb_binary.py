# -*- coding: utf-8 -*-
"""Lab 4 - NB - Binary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROqotKaRgRDDNxSwTQRI6nP_17rlA66F

# NB - Binary
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv('/content/diabetes.csv')

data.head()

data.shape

data.describe()

data.isnull().sum()

data['Outcome'].value_counts()

# class distribution 
data['Outcome'].value_counts()
sns.countplot(x='Outcome', data=data, palette='hls')
plt.show()
plt.savefig('Outcome')

X = data.drop('Outcome', axis=1)
y = data['Outcome']

y.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=0)

X_test[0:5]

y_test.head()

"""**NB**"""

mnb = MultinomialNB()
mnb.fit(X_train, y_train)
y_p = mnb.predict(X_test)
acc = accuracy_score(y_test, y_p)*100
print("NB - Accuracy: {:.3f}.".format(acc))
print("\nClassification Report")
print(classification_report(y_test, y_p))

"""**Class balancing**"""

from collections import Counter
from imblearn.over_sampling import SMOTE
X_b, y_b = SMOTE().fit_resample(X, y)

plt.subplots(figsize=(5,5))
sns.countplot(x=y_b)
print(Counter(y_b))

# Split the dataset into a test and training set
X_tr, X_te, y_tr, y_te = train_test_split(X_b, y_b, test_size=0.2, random_state=0)

mnb_b = MultinomialNB()
mnb_b.fit(X_tr, y_tr)
y_p_b = mnb_b.predict(X_te)
acc_1 = accuracy_score(y_te, y_p_b)*100
print("NB - Accuracy: {:.3f}.".format(acc_1))
print("\nClassification Report")
print(classification_report(y_te, y_p_b))